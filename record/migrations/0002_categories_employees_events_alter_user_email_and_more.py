# Generated by Django 4.2.7 on 2023-11-22 11:42

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import record.validators


class Migration(migrations.Migration):

    dependencies = [
        ('record', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('sport', 'спорт'), ('tourism', 'туризм'), ('education', 'образование'), ('science', 'наука'), ('entertainment', 'развлечение'), ('sundry', 'разное')], max_length=50)),
            ],
            options={
                'db_table': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Employees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, error_messages={'unique': 'такой номер телефона уже зарегистрирован'}, max_length=20, null=True, unique=True, validators=[record.validators.NumberValidator()], verbose_name='Номер телефона')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Присоединился')),
                ('firstname', models.CharField(max_length=255, verbose_name='Имя')),
                ('lastname', models.CharField(max_length=255, verbose_name='Фамилия')),
                ('email', models.EmailField(error_messages={'unique': 'такой email адрес уже зарегистрирован'}, max_length=254, unique=True, verbose_name='Email')),
                ('photo', models.ImageField(blank=True, default='default_photo/', upload_to='photo_employee/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'], code='invalid_image', message='Загрузите корректный формат')], verbose_name='Фото')),
            ],
            options={
                'db_table': 'employees',
            },
        ),
        migrations.CreateModel(
            name='Events',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('date_event', models.DateField(verbose_name='Дата')),
                ('start_time', models.TimeField(verbose_name='Начало')),
                ('end_time', models.TimeField(verbose_name='Конец')),
                ('status_tariff', models.CharField(choices=[('paid', 'платный'), ('free', 'бесплатный')], max_length=4, verbose_name='Статус')),
                ('status_opening', models.CharField(choices=[('open', 'открытый'), ('close', 'закрытый')], default='open', max_length=10, verbose_name='Вход')),
                ('limit_clients', models.SmallIntegerField(verbose_name='Лимит клиентов')),
                ('quantity_clients', models.SmallIntegerField(default=0, verbose_name='Количество клиентов')),
                ('price_event', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('employee', models.ManyToManyField(related_name='events', to='record.employees', verbose_name='Сотрудники')),
            ],
            options={
                'db_table': 'events',
            },
        ),
        migrations.AlterField(
            model_name='user',
            name='email',
            field=models.EmailField(error_messages={'unique': 'такой email адрес уже зарегистрирован'}, max_length=254, unique=True, verbose_name='Email'),
        ),
        migrations.CreateModel(
            name='Recordings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='record.events')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recordings',
            },
        ),
        migrations.CreateModel(
            name='Organizations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, error_messages={'unique': 'такой номер телефона уже зарегистрирован'}, max_length=20, null=True, unique=True, validators=[record.validators.NumberValidator()], verbose_name='Номер телефона')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Присоединился')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('photo', models.ImageField(blank=True, default='default_photo/', upload_to='photo_organization/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'], code='invalid_image', message='Загрузите корректный формат')], verbose_name='Фото')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='organizations', to='record.categories', verbose_name='Категория')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'organizations',
            },
        ),
        migrations.AddField(
            model_name='events',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='record.organizations'),
        ),
        migrations.AddField(
            model_name='employees',
            name='organization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='record.organizations'),
        ),
        migrations.CreateModel(
            name='Customers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, error_messages={'unique': 'такой номер телефона уже зарегистрирован'}, max_length=20, null=True, unique=True, validators=[record.validators.NumberValidator()], verbose_name='Номер телефона')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Присоединился')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('photo', models.ImageField(blank=True, default='default_photo/', upload_to='photo_customer/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'], code='invalid_image', message='Загрузите корректный формат')], verbose_name='Фото')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'customers',
            },
        ),
        migrations.AddConstraint(
            model_name='categories',
            constraint=models.CheckConstraint(check=models.Q(('name__in', ['sport', 'tourism', 'education', 'science', 'entertainment', 'sundry'])), name='check_categories'),
        ),
        migrations.AddConstraint(
            model_name='recordings',
            constraint=models.UniqueConstraint(fields=('event', 'user'), name='unique_recordings_user'),
        ),
        migrations.AddConstraint(
            model_name='events',
            constraint=models.CheckConstraint(check=models.Q(('quantity_clients__lte', models.F('limit_clients'))), name='check_quantity_clients_events'),
        ),
        migrations.AddConstraint(
            model_name='events',
            constraint=models.CheckConstraint(check=models.Q(('limit_clients__gt', 0)), name='check_limit_clients_events'),
        ),
        migrations.AddConstraint(
            model_name='events',
            constraint=models.CheckConstraint(check=models.Q(('status_tariff__in', ['paid', 'free'])), name='check_status_tariff_events'),
        ),
        migrations.AddConstraint(
            model_name='events',
            constraint=models.CheckConstraint(check=models.Q(('status_opening__in', ['open', 'close'])), name='check_status_opening_events'),
        ),
        migrations.AddConstraint(
            model_name='events',
            constraint=models.CheckConstraint(check=models.Q(('start_time__lt', models.F('end_time'))), name='check_time_events'),
        ),
    ]
